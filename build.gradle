import groovy.json.JsonSlurper

description = 'javascript spellchecker'

def verifyDictionary(dict) {
	assert dict instanceof Map
	assert dict.name != null : "dictionary must have a name"
	println "checking dictioniary '" + dict.name + "'"
	assert dict.words instanceof Map
	dict.words.each {
		index, words ->
			//def words = dict.words[index]
			assert words instanceof ArrayList
			words.each {
				word ->
					// each word should have the attribute 'w' defined.
					assert word.w != null : "attribute 'w' missing for entry in '" + index + "'"
					// verify that the word corresponds to the index.
					assert word.w.toLowerCase().replace("|", "").equals(index) : "word '" + word.w + "' does not correspond to entry in '" + index + "'"
					// verify that each word has its type defined.
					assert word.type != null : "word '" + word.w + "' is lacking a type defintion"
					// verify the word depending on its type
					if (word.type == 'adj' ||
						word.type == 'adv' ||
						word.type == 'article' ||
						word.type == 'conjunction' ||
						word.type == 'dash' ||
						word.type == 'fragment' ||
						word.type == 'greeting' ||
						word.type == 'indefpronoun' ||
						word.type == 'interjection' ||
						word.type == 'lbracket' ||
						word.type == 'lquotation' ||
						word.type == 'name' ||
						word.type == 'noun' ||
						word.type == 'part' ||
						word.type == 'particle' ||
						word.type == 'prefix' ||
						word.type == 'prepos' ||
						word.type == 'prenoun' ||
						word.type == 'preverb' ||
						word.type == 'pronoun' ||
						word.type == 'rbracket' ||
						word.type == 'rquotation' ||
						word.type == 'subjunction' ||
						word.type == 'suffix' ||
						word.type == 'unit' ||
						word.type == 'verb') {
						// currently nothing to check.
					} else if (word.type == 'numeral' || word.type == 'ordinal') {
						assert word.value != null : word.type + " '" + word.w + "' is lacking a defintion of 'value'"
					} else if (word.type == 'abbr') {
						assert word.abbr != null : "word '" + word.w + "' is lacking a defintion of 'abbr'"
					} else if (word.type == 'contraction') {
						assert word.contraction != null : "contraction '" + word.w + "' is lacking a defintion of 'contraction'"
					} else if (word.type == 'symbol') {
						assert word.symbol != null : word.type + " '" + word.w + "' is lacking a defintion of 'symbol'"
					} else if (word.type == 'mark') {
						assert word.mark != null : word.type + " '" + word.w + "' is lacking a defintion of 'mark'"
					} else {
						assert false : "word '" + word.w + "' is of unknown type '" + word.type + "'"
 					}
			}
	}
}

task verifyDictionaryDeDE {
	description = 'verifies the dictionary to be syntactical correct'
	verifyDictionary(new JsonSlurper().parse(new File("${projectDir}/src/dict/alltiny.dict.base.de_de.json")))
}

task verifyDictionaryDeCH {
	description = 'verifies the dictionary to be syntactical correct'
	verifyDictionary(new JsonSlurper().parse(new File("${projectDir}/src/dict/alltiny.dict.base.de_ch.json")))
}

task verifyDictionaryDeAT {
	description = 'verifies the dictionary to be syntactical correct'
	verifyDictionary(new JsonSlurper().parse(new File("${projectDir}/src/dict/alltiny.dict.base.de_at.json")))
}

task verifyDictionaryEnGB {
	description = 'verifies the dictionary to be syntactical correct'
	verifyDictionary(new JsonSlurper().parse(new File("${projectDir}/src/dict/alltiny.dict.base.en_gb.json")))
}

task verifyDictionaryTradenames {
	description = 'verifies the dictionary to be syntactical correct'
	verifyDictionary(new JsonSlurper().parse(new File("${projectDir}/src/dict/alltiny.dict.tradenames.json")))
}
